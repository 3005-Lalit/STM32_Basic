
Access_Level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ccc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f50  08000f50  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000f50  08000f50  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f50  08000f50  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f50  08000f50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023ec  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000653  00000000  00000000  00022480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00022ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  00022c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002acb  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001388  00000000  00000000  000257db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009785  00000000  00000000  00026b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a7c  00000000  00000000  0003033c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000064 	.word	0x20000064
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e60 	.word	0x08000e60

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000068 	.word	0x20000068
 80001e8:	08000e60 	.word	0x08000e60

080001ec <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <generate_interrupt+0x2c>)
 80001f4:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <generate_interrupt+0x30>)
 80001f8:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0208 	orr.w	r2, r3, #8
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2203      	movs	r2, #3
 800020a:	601a      	str	r2, [r3, #0]

}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ef00 	.word	0xe000ef00
 800021c:	e000e100 	.word	0xe000e100

08000220 <change_access_level_unpriv>:

void change_access_level_unpriv(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	//read
	__asm volatile ("MRS R0,CONTROL");
 8000224:	f3ef 8014 	mrs	r0, CONTROL
	//Modify
	__asm volatile ("ORR R0,R0,#0x01");
 8000228:	f040 0001 	orr.w	r0, r0, #1
	//Write
	__asm volatile ("MSR CONTROL, R0");
 800022c:	f380 8814 	msr	CONTROL, r0
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
	...

0800023c <main>:

/* This function executes in THREAD MODE+ Prev Access level of the processor */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <main+0x1c>)
 8000242:	f000 f9b5 	bl	80005b0 <puts>

	change_access_level_unpriv();
 8000246:	f7ff ffeb 	bl	8000220 <change_access_level_unpriv>

	generate_interrupt();
 800024a:	f7ff ffcf 	bl	80001ec <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 800024e:	4803      	ldr	r0, [pc, #12]	; (800025c <main+0x20>)
 8000250:	f000 f9ae 	bl	80005b0 <puts>

	for(;;);
 8000254:	e7fe      	b.n	8000254 <main+0x18>
 8000256:	bf00      	nop
 8000258:	08000e78 	.word	0x08000e78
 800025c:	08000e9c 	.word	0x08000e9c

08000260 <RTC_WKUP_IRQHandler>:
}

/* This function(ISR) executes in HANDLER MODE of the processor */
void RTC_WKUP_IRQHandler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	printf("In handler mode : ISR\n");
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <RTC_WKUP_IRQHandler+0x10>)
 8000266:	f000 f9a3 	bl	80005b0 <puts>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	08000ec0 	.word	0x08000ec0

08000274 <HardFault_Handler>:

void HardFault_Handler (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	printf("Hard Fault detected\n");
 8000278:	4801      	ldr	r0, [pc, #4]	; (8000280 <HardFault_Handler+0xc>)
 800027a:	f000 f999 	bl	80005b0 <puts>
	while(1);
 800027e:	e7fe      	b.n	800027e <HardFault_Handler+0xa>
 8000280:	08000ed8 	.word	0x08000ed8

08000284 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <ITM_SendChar+0x48>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <ITM_SendChar+0x48>)
 8000294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000298:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <ITM_SendChar+0x4c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <ITM_SendChar+0x4c>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002a6:	bf00      	nop
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f8      	beq.n	80002a8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	6013      	str	r3, [r2, #0]
}
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000edfc 	.word	0xe000edfc
 80002d0:	e0000e00 	.word	0xe0000e00

080002d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	e00a      	b.n	80002fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002e6:	f3af 8000 	nop.w
 80002ea:	4601      	mov	r1, r0
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	1c5a      	adds	r2, r3, #1
 80002f0:	60ba      	str	r2, [r7, #8]
 80002f2:	b2ca      	uxtb	r2, r1
 80002f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	3301      	adds	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	697a      	ldr	r2, [r7, #20]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	429a      	cmp	r2, r3
 8000302:	dbf0      	blt.n	80002e6 <_read+0x12>
	}

return len;
 8000304:	687b      	ldr	r3, [r7, #4]
}
 8000306:	4618      	mov	r0, r3
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}

0800030e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b086      	sub	sp, #24
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	e009      	b.n	8000334 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60ba      	str	r2, [r7, #8]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffab 	bl	8000284 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf1      	blt.n	8000320 <_write+0x12>
	}
	return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <_close>:

int _close(int file)
{
 8000346:	b480      	push	{r7}
 8000348:	b083      	sub	sp, #12
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
	return -1;
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800036e:	605a      	str	r2, [r3, #4]
	return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <_isatty>:

int _isatty(int file)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
	return 1;
 8000386:	2301      	movs	r3, #1
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
	return 0;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <_sbrk+0x5c>)
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <_sbrk+0x60>)
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <_sbrk+0x64>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d102      	bne.n	80003d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <_sbrk+0x64>)
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <_sbrk+0x68>)
 80003d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d2:	4b10      	ldr	r3, [pc, #64]	; (8000414 <_sbrk+0x64>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	693a      	ldr	r2, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d207      	bcs.n	80003f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e0:	f000 f846 	bl	8000470 <__errno>
 80003e4:	4603      	mov	r3, r0
 80003e6:	220c      	movs	r2, #12
 80003e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	e009      	b.n	8000404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <_sbrk+0x64>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <_sbrk+0x64>)
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	4a05      	ldr	r2, [pc, #20]	; (8000414 <_sbrk+0x64>)
 8000400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000402:	68fb      	ldr	r3, [r7, #12]
}
 8000404:	4618      	mov	r0, r3
 8000406:	3718      	adds	r7, #24
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20030000 	.word	0x20030000
 8000410:	00000400 	.word	0x00000400
 8000414:	20000080 	.word	0x20000080
 8000418:	200000a0 	.word	0x200000a0

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000420:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	; (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f817 	bl	800047c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff fef5 	bl	800023c <main>

08000452 <LoopForever>:

LoopForever:
    b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000460:	08000f58 	.word	0x08000f58
  ldr r2, =_sbss
 8000464:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000468:	2000009c 	.word	0x2000009c

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__errno>:
 8000470:	4b01      	ldr	r3, [pc, #4]	; (8000478 <__errno+0x8>)
 8000472:	6818      	ldr	r0, [r3, #0]
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000000 	.word	0x20000000

0800047c <__libc_init_array>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4d0d      	ldr	r5, [pc, #52]	; (80004b4 <__libc_init_array+0x38>)
 8000480:	4c0d      	ldr	r4, [pc, #52]	; (80004b8 <__libc_init_array+0x3c>)
 8000482:	1b64      	subs	r4, r4, r5
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	2600      	movs	r6, #0
 8000488:	42a6      	cmp	r6, r4
 800048a:	d109      	bne.n	80004a0 <__libc_init_array+0x24>
 800048c:	4d0b      	ldr	r5, [pc, #44]	; (80004bc <__libc_init_array+0x40>)
 800048e:	4c0c      	ldr	r4, [pc, #48]	; (80004c0 <__libc_init_array+0x44>)
 8000490:	f000 fce6 	bl	8000e60 <_init>
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	2600      	movs	r6, #0
 800049a:	42a6      	cmp	r6, r4
 800049c:	d105      	bne.n	80004aa <__libc_init_array+0x2e>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a4:	4798      	blx	r3
 80004a6:	3601      	adds	r6, #1
 80004a8:	e7ee      	b.n	8000488 <__libc_init_array+0xc>
 80004aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ae:	4798      	blx	r3
 80004b0:	3601      	adds	r6, #1
 80004b2:	e7f2      	b.n	800049a <__libc_init_array+0x1e>
 80004b4:	08000f50 	.word	0x08000f50
 80004b8:	08000f50 	.word	0x08000f50
 80004bc:	08000f50 	.word	0x08000f50
 80004c0:	08000f54 	.word	0x08000f54

080004c4 <memset>:
 80004c4:	4402      	add	r2, r0
 80004c6:	4603      	mov	r3, r0
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d100      	bne.n	80004ce <memset+0xa>
 80004cc:	4770      	bx	lr
 80004ce:	f803 1b01 	strb.w	r1, [r3], #1
 80004d2:	e7f9      	b.n	80004c8 <memset+0x4>

080004d4 <_puts_r>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	460e      	mov	r6, r1
 80004d8:	4605      	mov	r5, r0
 80004da:	b118      	cbz	r0, 80004e4 <_puts_r+0x10>
 80004dc:	6983      	ldr	r3, [r0, #24]
 80004de:	b90b      	cbnz	r3, 80004e4 <_puts_r+0x10>
 80004e0:	f000 fa48 	bl	8000974 <__sinit>
 80004e4:	69ab      	ldr	r3, [r5, #24]
 80004e6:	68ac      	ldr	r4, [r5, #8]
 80004e8:	b913      	cbnz	r3, 80004f0 <_puts_r+0x1c>
 80004ea:	4628      	mov	r0, r5
 80004ec:	f000 fa42 	bl	8000974 <__sinit>
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <_puts_r+0xd0>)
 80004f2:	429c      	cmp	r4, r3
 80004f4:	d120      	bne.n	8000538 <_puts_r+0x64>
 80004f6:	686c      	ldr	r4, [r5, #4]
 80004f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80004fa:	07db      	lsls	r3, r3, #31
 80004fc:	d405      	bmi.n	800050a <_puts_r+0x36>
 80004fe:	89a3      	ldrh	r3, [r4, #12]
 8000500:	0598      	lsls	r0, r3, #22
 8000502:	d402      	bmi.n	800050a <_puts_r+0x36>
 8000504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000506:	f000 fad3 	bl	8000ab0 <__retarget_lock_acquire_recursive>
 800050a:	89a3      	ldrh	r3, [r4, #12]
 800050c:	0719      	lsls	r1, r3, #28
 800050e:	d51d      	bpl.n	800054c <_puts_r+0x78>
 8000510:	6923      	ldr	r3, [r4, #16]
 8000512:	b1db      	cbz	r3, 800054c <_puts_r+0x78>
 8000514:	3e01      	subs	r6, #1
 8000516:	68a3      	ldr	r3, [r4, #8]
 8000518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800051c:	3b01      	subs	r3, #1
 800051e:	60a3      	str	r3, [r4, #8]
 8000520:	bb39      	cbnz	r1, 8000572 <_puts_r+0x9e>
 8000522:	2b00      	cmp	r3, #0
 8000524:	da38      	bge.n	8000598 <_puts_r+0xc4>
 8000526:	4622      	mov	r2, r4
 8000528:	210a      	movs	r1, #10
 800052a:	4628      	mov	r0, r5
 800052c:	f000 f848 	bl	80005c0 <__swbuf_r>
 8000530:	3001      	adds	r0, #1
 8000532:	d011      	beq.n	8000558 <_puts_r+0x84>
 8000534:	250a      	movs	r5, #10
 8000536:	e011      	b.n	800055c <_puts_r+0x88>
 8000538:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <_puts_r+0xd4>)
 800053a:	429c      	cmp	r4, r3
 800053c:	d101      	bne.n	8000542 <_puts_r+0x6e>
 800053e:	68ac      	ldr	r4, [r5, #8]
 8000540:	e7da      	b.n	80004f8 <_puts_r+0x24>
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <_puts_r+0xd8>)
 8000544:	429c      	cmp	r4, r3
 8000546:	bf08      	it	eq
 8000548:	68ec      	ldreq	r4, [r5, #12]
 800054a:	e7d5      	b.n	80004f8 <_puts_r+0x24>
 800054c:	4621      	mov	r1, r4
 800054e:	4628      	mov	r0, r5
 8000550:	f000 f888 	bl	8000664 <__swsetup_r>
 8000554:	2800      	cmp	r0, #0
 8000556:	d0dd      	beq.n	8000514 <_puts_r+0x40>
 8000558:	f04f 35ff 	mov.w	r5, #4294967295
 800055c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800055e:	07da      	lsls	r2, r3, #31
 8000560:	d405      	bmi.n	800056e <_puts_r+0x9a>
 8000562:	89a3      	ldrh	r3, [r4, #12]
 8000564:	059b      	lsls	r3, r3, #22
 8000566:	d402      	bmi.n	800056e <_puts_r+0x9a>
 8000568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800056a:	f000 faa2 	bl	8000ab2 <__retarget_lock_release_recursive>
 800056e:	4628      	mov	r0, r5
 8000570:	bd70      	pop	{r4, r5, r6, pc}
 8000572:	2b00      	cmp	r3, #0
 8000574:	da04      	bge.n	8000580 <_puts_r+0xac>
 8000576:	69a2      	ldr	r2, [r4, #24]
 8000578:	429a      	cmp	r2, r3
 800057a:	dc06      	bgt.n	800058a <_puts_r+0xb6>
 800057c:	290a      	cmp	r1, #10
 800057e:	d004      	beq.n	800058a <_puts_r+0xb6>
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	6022      	str	r2, [r4, #0]
 8000586:	7019      	strb	r1, [r3, #0]
 8000588:	e7c5      	b.n	8000516 <_puts_r+0x42>
 800058a:	4622      	mov	r2, r4
 800058c:	4628      	mov	r0, r5
 800058e:	f000 f817 	bl	80005c0 <__swbuf_r>
 8000592:	3001      	adds	r0, #1
 8000594:	d1bf      	bne.n	8000516 <_puts_r+0x42>
 8000596:	e7df      	b.n	8000558 <_puts_r+0x84>
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	250a      	movs	r5, #10
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	6022      	str	r2, [r4, #0]
 80005a0:	701d      	strb	r5, [r3, #0]
 80005a2:	e7db      	b.n	800055c <_puts_r+0x88>
 80005a4:	08000f10 	.word	0x08000f10
 80005a8:	08000f30 	.word	0x08000f30
 80005ac:	08000ef0 	.word	0x08000ef0

080005b0 <puts>:
 80005b0:	4b02      	ldr	r3, [pc, #8]	; (80005bc <puts+0xc>)
 80005b2:	4601      	mov	r1, r0
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	f7ff bf8d 	b.w	80004d4 <_puts_r>
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000

080005c0 <__swbuf_r>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	460e      	mov	r6, r1
 80005c4:	4614      	mov	r4, r2
 80005c6:	4605      	mov	r5, r0
 80005c8:	b118      	cbz	r0, 80005d2 <__swbuf_r+0x12>
 80005ca:	6983      	ldr	r3, [r0, #24]
 80005cc:	b90b      	cbnz	r3, 80005d2 <__swbuf_r+0x12>
 80005ce:	f000 f9d1 	bl	8000974 <__sinit>
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <__swbuf_r+0x98>)
 80005d4:	429c      	cmp	r4, r3
 80005d6:	d12b      	bne.n	8000630 <__swbuf_r+0x70>
 80005d8:	686c      	ldr	r4, [r5, #4]
 80005da:	69a3      	ldr	r3, [r4, #24]
 80005dc:	60a3      	str	r3, [r4, #8]
 80005de:	89a3      	ldrh	r3, [r4, #12]
 80005e0:	071a      	lsls	r2, r3, #28
 80005e2:	d52f      	bpl.n	8000644 <__swbuf_r+0x84>
 80005e4:	6923      	ldr	r3, [r4, #16]
 80005e6:	b36b      	cbz	r3, 8000644 <__swbuf_r+0x84>
 80005e8:	6923      	ldr	r3, [r4, #16]
 80005ea:	6820      	ldr	r0, [r4, #0]
 80005ec:	1ac0      	subs	r0, r0, r3
 80005ee:	6963      	ldr	r3, [r4, #20]
 80005f0:	b2f6      	uxtb	r6, r6
 80005f2:	4283      	cmp	r3, r0
 80005f4:	4637      	mov	r7, r6
 80005f6:	dc04      	bgt.n	8000602 <__swbuf_r+0x42>
 80005f8:	4621      	mov	r1, r4
 80005fa:	4628      	mov	r0, r5
 80005fc:	f000 f926 	bl	800084c <_fflush_r>
 8000600:	bb30      	cbnz	r0, 8000650 <__swbuf_r+0x90>
 8000602:	68a3      	ldr	r3, [r4, #8]
 8000604:	3b01      	subs	r3, #1
 8000606:	60a3      	str	r3, [r4, #8]
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	6022      	str	r2, [r4, #0]
 800060e:	701e      	strb	r6, [r3, #0]
 8000610:	6963      	ldr	r3, [r4, #20]
 8000612:	3001      	adds	r0, #1
 8000614:	4283      	cmp	r3, r0
 8000616:	d004      	beq.n	8000622 <__swbuf_r+0x62>
 8000618:	89a3      	ldrh	r3, [r4, #12]
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d506      	bpl.n	800062c <__swbuf_r+0x6c>
 800061e:	2e0a      	cmp	r6, #10
 8000620:	d104      	bne.n	800062c <__swbuf_r+0x6c>
 8000622:	4621      	mov	r1, r4
 8000624:	4628      	mov	r0, r5
 8000626:	f000 f911 	bl	800084c <_fflush_r>
 800062a:	b988      	cbnz	r0, 8000650 <__swbuf_r+0x90>
 800062c:	4638      	mov	r0, r7
 800062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <__swbuf_r+0x9c>)
 8000632:	429c      	cmp	r4, r3
 8000634:	d101      	bne.n	800063a <__swbuf_r+0x7a>
 8000636:	68ac      	ldr	r4, [r5, #8]
 8000638:	e7cf      	b.n	80005da <__swbuf_r+0x1a>
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <__swbuf_r+0xa0>)
 800063c:	429c      	cmp	r4, r3
 800063e:	bf08      	it	eq
 8000640:	68ec      	ldreq	r4, [r5, #12]
 8000642:	e7ca      	b.n	80005da <__swbuf_r+0x1a>
 8000644:	4621      	mov	r1, r4
 8000646:	4628      	mov	r0, r5
 8000648:	f000 f80c 	bl	8000664 <__swsetup_r>
 800064c:	2800      	cmp	r0, #0
 800064e:	d0cb      	beq.n	80005e8 <__swbuf_r+0x28>
 8000650:	f04f 37ff 	mov.w	r7, #4294967295
 8000654:	e7ea      	b.n	800062c <__swbuf_r+0x6c>
 8000656:	bf00      	nop
 8000658:	08000f10 	.word	0x08000f10
 800065c:	08000f30 	.word	0x08000f30
 8000660:	08000ef0 	.word	0x08000ef0

08000664 <__swsetup_r>:
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <__swsetup_r+0xcc>)
 8000666:	b570      	push	{r4, r5, r6, lr}
 8000668:	681d      	ldr	r5, [r3, #0]
 800066a:	4606      	mov	r6, r0
 800066c:	460c      	mov	r4, r1
 800066e:	b125      	cbz	r5, 800067a <__swsetup_r+0x16>
 8000670:	69ab      	ldr	r3, [r5, #24]
 8000672:	b913      	cbnz	r3, 800067a <__swsetup_r+0x16>
 8000674:	4628      	mov	r0, r5
 8000676:	f000 f97d 	bl	8000974 <__sinit>
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <__swsetup_r+0xd0>)
 800067c:	429c      	cmp	r4, r3
 800067e:	d10f      	bne.n	80006a0 <__swsetup_r+0x3c>
 8000680:	686c      	ldr	r4, [r5, #4]
 8000682:	89a3      	ldrh	r3, [r4, #12]
 8000684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000688:	0719      	lsls	r1, r3, #28
 800068a:	d42c      	bmi.n	80006e6 <__swsetup_r+0x82>
 800068c:	06dd      	lsls	r5, r3, #27
 800068e:	d411      	bmi.n	80006b4 <__swsetup_r+0x50>
 8000690:	2309      	movs	r3, #9
 8000692:	6033      	str	r3, [r6, #0]
 8000694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000698:	81a3      	strh	r3, [r4, #12]
 800069a:	f04f 30ff 	mov.w	r0, #4294967295
 800069e:	e03e      	b.n	800071e <__swsetup_r+0xba>
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <__swsetup_r+0xd4>)
 80006a2:	429c      	cmp	r4, r3
 80006a4:	d101      	bne.n	80006aa <__swsetup_r+0x46>
 80006a6:	68ac      	ldr	r4, [r5, #8]
 80006a8:	e7eb      	b.n	8000682 <__swsetup_r+0x1e>
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <__swsetup_r+0xd8>)
 80006ac:	429c      	cmp	r4, r3
 80006ae:	bf08      	it	eq
 80006b0:	68ec      	ldreq	r4, [r5, #12]
 80006b2:	e7e6      	b.n	8000682 <__swsetup_r+0x1e>
 80006b4:	0758      	lsls	r0, r3, #29
 80006b6:	d512      	bpl.n	80006de <__swsetup_r+0x7a>
 80006b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80006ba:	b141      	cbz	r1, 80006ce <__swsetup_r+0x6a>
 80006bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d002      	beq.n	80006ca <__swsetup_r+0x66>
 80006c4:	4630      	mov	r0, r6
 80006c6:	f000 fa59 	bl	8000b7c <_free_r>
 80006ca:	2300      	movs	r3, #0
 80006cc:	6363      	str	r3, [r4, #52]	; 0x34
 80006ce:	89a3      	ldrh	r3, [r4, #12]
 80006d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80006d4:	81a3      	strh	r3, [r4, #12]
 80006d6:	2300      	movs	r3, #0
 80006d8:	6063      	str	r3, [r4, #4]
 80006da:	6923      	ldr	r3, [r4, #16]
 80006dc:	6023      	str	r3, [r4, #0]
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	81a3      	strh	r3, [r4, #12]
 80006e6:	6923      	ldr	r3, [r4, #16]
 80006e8:	b94b      	cbnz	r3, 80006fe <__swsetup_r+0x9a>
 80006ea:	89a3      	ldrh	r3, [r4, #12]
 80006ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80006f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f4:	d003      	beq.n	80006fe <__swsetup_r+0x9a>
 80006f6:	4621      	mov	r1, r4
 80006f8:	4630      	mov	r0, r6
 80006fa:	f000 f9ff 	bl	8000afc <__smakebuf_r>
 80006fe:	89a0      	ldrh	r0, [r4, #12]
 8000700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000704:	f010 0301 	ands.w	r3, r0, #1
 8000708:	d00a      	beq.n	8000720 <__swsetup_r+0xbc>
 800070a:	2300      	movs	r3, #0
 800070c:	60a3      	str	r3, [r4, #8]
 800070e:	6963      	ldr	r3, [r4, #20]
 8000710:	425b      	negs	r3, r3
 8000712:	61a3      	str	r3, [r4, #24]
 8000714:	6923      	ldr	r3, [r4, #16]
 8000716:	b943      	cbnz	r3, 800072a <__swsetup_r+0xc6>
 8000718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800071c:	d1ba      	bne.n	8000694 <__swsetup_r+0x30>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	0781      	lsls	r1, r0, #30
 8000722:	bf58      	it	pl
 8000724:	6963      	ldrpl	r3, [r4, #20]
 8000726:	60a3      	str	r3, [r4, #8]
 8000728:	e7f4      	b.n	8000714 <__swsetup_r+0xb0>
 800072a:	2000      	movs	r0, #0
 800072c:	e7f7      	b.n	800071e <__swsetup_r+0xba>
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000
 8000734:	08000f10 	.word	0x08000f10
 8000738:	08000f30 	.word	0x08000f30
 800073c:	08000ef0 	.word	0x08000ef0

08000740 <__sflush_r>:
 8000740:	898a      	ldrh	r2, [r1, #12]
 8000742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000746:	4605      	mov	r5, r0
 8000748:	0710      	lsls	r0, r2, #28
 800074a:	460c      	mov	r4, r1
 800074c:	d458      	bmi.n	8000800 <__sflush_r+0xc0>
 800074e:	684b      	ldr	r3, [r1, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dc05      	bgt.n	8000760 <__sflush_r+0x20>
 8000754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000756:	2b00      	cmp	r3, #0
 8000758:	dc02      	bgt.n	8000760 <__sflush_r+0x20>
 800075a:	2000      	movs	r0, #0
 800075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0f9      	beq.n	800075a <__sflush_r+0x1a>
 8000766:	2300      	movs	r3, #0
 8000768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800076c:	682f      	ldr	r7, [r5, #0]
 800076e:	602b      	str	r3, [r5, #0]
 8000770:	d032      	beq.n	80007d8 <__sflush_r+0x98>
 8000772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000774:	89a3      	ldrh	r3, [r4, #12]
 8000776:	075a      	lsls	r2, r3, #29
 8000778:	d505      	bpl.n	8000786 <__sflush_r+0x46>
 800077a:	6863      	ldr	r3, [r4, #4]
 800077c:	1ac0      	subs	r0, r0, r3
 800077e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000780:	b10b      	cbz	r3, 8000786 <__sflush_r+0x46>
 8000782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000784:	1ac0      	subs	r0, r0, r3
 8000786:	2300      	movs	r3, #0
 8000788:	4602      	mov	r2, r0
 800078a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800078c:	6a21      	ldr	r1, [r4, #32]
 800078e:	4628      	mov	r0, r5
 8000790:	47b0      	blx	r6
 8000792:	1c43      	adds	r3, r0, #1
 8000794:	89a3      	ldrh	r3, [r4, #12]
 8000796:	d106      	bne.n	80007a6 <__sflush_r+0x66>
 8000798:	6829      	ldr	r1, [r5, #0]
 800079a:	291d      	cmp	r1, #29
 800079c:	d82c      	bhi.n	80007f8 <__sflush_r+0xb8>
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <__sflush_r+0x108>)
 80007a0:	40ca      	lsrs	r2, r1
 80007a2:	07d6      	lsls	r6, r2, #31
 80007a4:	d528      	bpl.n	80007f8 <__sflush_r+0xb8>
 80007a6:	2200      	movs	r2, #0
 80007a8:	6062      	str	r2, [r4, #4]
 80007aa:	04d9      	lsls	r1, r3, #19
 80007ac:	6922      	ldr	r2, [r4, #16]
 80007ae:	6022      	str	r2, [r4, #0]
 80007b0:	d504      	bpl.n	80007bc <__sflush_r+0x7c>
 80007b2:	1c42      	adds	r2, r0, #1
 80007b4:	d101      	bne.n	80007ba <__sflush_r+0x7a>
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	b903      	cbnz	r3, 80007bc <__sflush_r+0x7c>
 80007ba:	6560      	str	r0, [r4, #84]	; 0x54
 80007bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007be:	602f      	str	r7, [r5, #0]
 80007c0:	2900      	cmp	r1, #0
 80007c2:	d0ca      	beq.n	800075a <__sflush_r+0x1a>
 80007c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007c8:	4299      	cmp	r1, r3
 80007ca:	d002      	beq.n	80007d2 <__sflush_r+0x92>
 80007cc:	4628      	mov	r0, r5
 80007ce:	f000 f9d5 	bl	8000b7c <_free_r>
 80007d2:	2000      	movs	r0, #0
 80007d4:	6360      	str	r0, [r4, #52]	; 0x34
 80007d6:	e7c1      	b.n	800075c <__sflush_r+0x1c>
 80007d8:	6a21      	ldr	r1, [r4, #32]
 80007da:	2301      	movs	r3, #1
 80007dc:	4628      	mov	r0, r5
 80007de:	47b0      	blx	r6
 80007e0:	1c41      	adds	r1, r0, #1
 80007e2:	d1c7      	bne.n	8000774 <__sflush_r+0x34>
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0c4      	beq.n	8000774 <__sflush_r+0x34>
 80007ea:	2b1d      	cmp	r3, #29
 80007ec:	d001      	beq.n	80007f2 <__sflush_r+0xb2>
 80007ee:	2b16      	cmp	r3, #22
 80007f0:	d101      	bne.n	80007f6 <__sflush_r+0xb6>
 80007f2:	602f      	str	r7, [r5, #0]
 80007f4:	e7b1      	b.n	800075a <__sflush_r+0x1a>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	81a3      	strh	r3, [r4, #12]
 80007fe:	e7ad      	b.n	800075c <__sflush_r+0x1c>
 8000800:	690f      	ldr	r7, [r1, #16]
 8000802:	2f00      	cmp	r7, #0
 8000804:	d0a9      	beq.n	800075a <__sflush_r+0x1a>
 8000806:	0793      	lsls	r3, r2, #30
 8000808:	680e      	ldr	r6, [r1, #0]
 800080a:	bf08      	it	eq
 800080c:	694b      	ldreq	r3, [r1, #20]
 800080e:	600f      	str	r7, [r1, #0]
 8000810:	bf18      	it	ne
 8000812:	2300      	movne	r3, #0
 8000814:	eba6 0807 	sub.w	r8, r6, r7
 8000818:	608b      	str	r3, [r1, #8]
 800081a:	f1b8 0f00 	cmp.w	r8, #0
 800081e:	dd9c      	ble.n	800075a <__sflush_r+0x1a>
 8000820:	6a21      	ldr	r1, [r4, #32]
 8000822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000824:	4643      	mov	r3, r8
 8000826:	463a      	mov	r2, r7
 8000828:	4628      	mov	r0, r5
 800082a:	47b0      	blx	r6
 800082c:	2800      	cmp	r0, #0
 800082e:	dc06      	bgt.n	800083e <__sflush_r+0xfe>
 8000830:	89a3      	ldrh	r3, [r4, #12]
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	81a3      	strh	r3, [r4, #12]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295
 800083c:	e78e      	b.n	800075c <__sflush_r+0x1c>
 800083e:	4407      	add	r7, r0
 8000840:	eba8 0800 	sub.w	r8, r8, r0
 8000844:	e7e9      	b.n	800081a <__sflush_r+0xda>
 8000846:	bf00      	nop
 8000848:	20400001 	.word	0x20400001

0800084c <_fflush_r>:
 800084c:	b538      	push	{r3, r4, r5, lr}
 800084e:	690b      	ldr	r3, [r1, #16]
 8000850:	4605      	mov	r5, r0
 8000852:	460c      	mov	r4, r1
 8000854:	b913      	cbnz	r3, 800085c <_fflush_r+0x10>
 8000856:	2500      	movs	r5, #0
 8000858:	4628      	mov	r0, r5
 800085a:	bd38      	pop	{r3, r4, r5, pc}
 800085c:	b118      	cbz	r0, 8000866 <_fflush_r+0x1a>
 800085e:	6983      	ldr	r3, [r0, #24]
 8000860:	b90b      	cbnz	r3, 8000866 <_fflush_r+0x1a>
 8000862:	f000 f887 	bl	8000974 <__sinit>
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <_fflush_r+0x6c>)
 8000868:	429c      	cmp	r4, r3
 800086a:	d11b      	bne.n	80008a4 <_fflush_r+0x58>
 800086c:	686c      	ldr	r4, [r5, #4]
 800086e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0ef      	beq.n	8000856 <_fflush_r+0xa>
 8000876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000878:	07d0      	lsls	r0, r2, #31
 800087a:	d404      	bmi.n	8000886 <_fflush_r+0x3a>
 800087c:	0599      	lsls	r1, r3, #22
 800087e:	d402      	bmi.n	8000886 <_fflush_r+0x3a>
 8000880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000882:	f000 f915 	bl	8000ab0 <__retarget_lock_acquire_recursive>
 8000886:	4628      	mov	r0, r5
 8000888:	4621      	mov	r1, r4
 800088a:	f7ff ff59 	bl	8000740 <__sflush_r>
 800088e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000890:	07da      	lsls	r2, r3, #31
 8000892:	4605      	mov	r5, r0
 8000894:	d4e0      	bmi.n	8000858 <_fflush_r+0xc>
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	059b      	lsls	r3, r3, #22
 800089a:	d4dd      	bmi.n	8000858 <_fflush_r+0xc>
 800089c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800089e:	f000 f908 	bl	8000ab2 <__retarget_lock_release_recursive>
 80008a2:	e7d9      	b.n	8000858 <_fflush_r+0xc>
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <_fflush_r+0x70>)
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d101      	bne.n	80008ae <_fflush_r+0x62>
 80008aa:	68ac      	ldr	r4, [r5, #8]
 80008ac:	e7df      	b.n	800086e <_fflush_r+0x22>
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <_fflush_r+0x74>)
 80008b0:	429c      	cmp	r4, r3
 80008b2:	bf08      	it	eq
 80008b4:	68ec      	ldreq	r4, [r5, #12]
 80008b6:	e7da      	b.n	800086e <_fflush_r+0x22>
 80008b8:	08000f10 	.word	0x08000f10
 80008bc:	08000f30 	.word	0x08000f30
 80008c0:	08000ef0 	.word	0x08000ef0

080008c4 <std>:
 80008c4:	2300      	movs	r3, #0
 80008c6:	b510      	push	{r4, lr}
 80008c8:	4604      	mov	r4, r0
 80008ca:	e9c0 3300 	strd	r3, r3, [r0]
 80008ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008d2:	6083      	str	r3, [r0, #8]
 80008d4:	8181      	strh	r1, [r0, #12]
 80008d6:	6643      	str	r3, [r0, #100]	; 0x64
 80008d8:	81c2      	strh	r2, [r0, #14]
 80008da:	6183      	str	r3, [r0, #24]
 80008dc:	4619      	mov	r1, r3
 80008de:	2208      	movs	r2, #8
 80008e0:	305c      	adds	r0, #92	; 0x5c
 80008e2:	f7ff fdef 	bl	80004c4 <memset>
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <std+0x38>)
 80008e8:	6263      	str	r3, [r4, #36]	; 0x24
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <std+0x3c>)
 80008ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <std+0x40>)
 80008f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <std+0x44>)
 80008f4:	6224      	str	r4, [r4, #32]
 80008f6:	6323      	str	r3, [r4, #48]	; 0x30
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	bf00      	nop
 80008fc:	08000cf1 	.word	0x08000cf1
 8000900:	08000d13 	.word	0x08000d13
 8000904:	08000d4b 	.word	0x08000d4b
 8000908:	08000d6f 	.word	0x08000d6f

0800090c <_cleanup_r>:
 800090c:	4901      	ldr	r1, [pc, #4]	; (8000914 <_cleanup_r+0x8>)
 800090e:	f000 b8af 	b.w	8000a70 <_fwalk_reent>
 8000912:	bf00      	nop
 8000914:	0800084d 	.word	0x0800084d

08000918 <__sfmoreglue>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	1e4a      	subs	r2, r1, #1
 800091c:	2568      	movs	r5, #104	; 0x68
 800091e:	4355      	muls	r5, r2
 8000920:	460e      	mov	r6, r1
 8000922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000926:	f000 f979 	bl	8000c1c <_malloc_r>
 800092a:	4604      	mov	r4, r0
 800092c:	b140      	cbz	r0, 8000940 <__sfmoreglue+0x28>
 800092e:	2100      	movs	r1, #0
 8000930:	e9c0 1600 	strd	r1, r6, [r0]
 8000934:	300c      	adds	r0, #12
 8000936:	60a0      	str	r0, [r4, #8]
 8000938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800093c:	f7ff fdc2 	bl	80004c4 <memset>
 8000940:	4620      	mov	r0, r4
 8000942:	bd70      	pop	{r4, r5, r6, pc}

08000944 <__sfp_lock_acquire>:
 8000944:	4801      	ldr	r0, [pc, #4]	; (800094c <__sfp_lock_acquire+0x8>)
 8000946:	f000 b8b3 	b.w	8000ab0 <__retarget_lock_acquire_recursive>
 800094a:	bf00      	nop
 800094c:	20000094 	.word	0x20000094

08000950 <__sfp_lock_release>:
 8000950:	4801      	ldr	r0, [pc, #4]	; (8000958 <__sfp_lock_release+0x8>)
 8000952:	f000 b8ae 	b.w	8000ab2 <__retarget_lock_release_recursive>
 8000956:	bf00      	nop
 8000958:	20000094 	.word	0x20000094

0800095c <__sinit_lock_acquire>:
 800095c:	4801      	ldr	r0, [pc, #4]	; (8000964 <__sinit_lock_acquire+0x8>)
 800095e:	f000 b8a7 	b.w	8000ab0 <__retarget_lock_acquire_recursive>
 8000962:	bf00      	nop
 8000964:	2000008f 	.word	0x2000008f

08000968 <__sinit_lock_release>:
 8000968:	4801      	ldr	r0, [pc, #4]	; (8000970 <__sinit_lock_release+0x8>)
 800096a:	f000 b8a2 	b.w	8000ab2 <__retarget_lock_release_recursive>
 800096e:	bf00      	nop
 8000970:	2000008f 	.word	0x2000008f

08000974 <__sinit>:
 8000974:	b510      	push	{r4, lr}
 8000976:	4604      	mov	r4, r0
 8000978:	f7ff fff0 	bl	800095c <__sinit_lock_acquire>
 800097c:	69a3      	ldr	r3, [r4, #24]
 800097e:	b11b      	cbz	r3, 8000988 <__sinit+0x14>
 8000980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000984:	f7ff bff0 	b.w	8000968 <__sinit_lock_release>
 8000988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800098c:	6523      	str	r3, [r4, #80]	; 0x50
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <__sinit+0x68>)
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <__sinit+0x6c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	62a2      	str	r2, [r4, #40]	; 0x28
 8000996:	42a3      	cmp	r3, r4
 8000998:	bf04      	itt	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	61a3      	streq	r3, [r4, #24]
 800099e:	4620      	mov	r0, r4
 80009a0:	f000 f820 	bl	80009e4 <__sfp>
 80009a4:	6060      	str	r0, [r4, #4]
 80009a6:	4620      	mov	r0, r4
 80009a8:	f000 f81c 	bl	80009e4 <__sfp>
 80009ac:	60a0      	str	r0, [r4, #8]
 80009ae:	4620      	mov	r0, r4
 80009b0:	f000 f818 	bl	80009e4 <__sfp>
 80009b4:	2200      	movs	r2, #0
 80009b6:	60e0      	str	r0, [r4, #12]
 80009b8:	2104      	movs	r1, #4
 80009ba:	6860      	ldr	r0, [r4, #4]
 80009bc:	f7ff ff82 	bl	80008c4 <std>
 80009c0:	68a0      	ldr	r0, [r4, #8]
 80009c2:	2201      	movs	r2, #1
 80009c4:	2109      	movs	r1, #9
 80009c6:	f7ff ff7d 	bl	80008c4 <std>
 80009ca:	68e0      	ldr	r0, [r4, #12]
 80009cc:	2202      	movs	r2, #2
 80009ce:	2112      	movs	r1, #18
 80009d0:	f7ff ff78 	bl	80008c4 <std>
 80009d4:	2301      	movs	r3, #1
 80009d6:	61a3      	str	r3, [r4, #24]
 80009d8:	e7d2      	b.n	8000980 <__sinit+0xc>
 80009da:	bf00      	nop
 80009dc:	08000eec 	.word	0x08000eec
 80009e0:	0800090d 	.word	0x0800090d

080009e4 <__sfp>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	4607      	mov	r7, r0
 80009e8:	f7ff ffac 	bl	8000944 <__sfp_lock_acquire>
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <__sfp+0x84>)
 80009ee:	681e      	ldr	r6, [r3, #0]
 80009f0:	69b3      	ldr	r3, [r6, #24]
 80009f2:	b913      	cbnz	r3, 80009fa <__sfp+0x16>
 80009f4:	4630      	mov	r0, r6
 80009f6:	f7ff ffbd 	bl	8000974 <__sinit>
 80009fa:	3648      	adds	r6, #72	; 0x48
 80009fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	d503      	bpl.n	8000a0c <__sfp+0x28>
 8000a04:	6833      	ldr	r3, [r6, #0]
 8000a06:	b30b      	cbz	r3, 8000a4c <__sfp+0x68>
 8000a08:	6836      	ldr	r6, [r6, #0]
 8000a0a:	e7f7      	b.n	80009fc <__sfp+0x18>
 8000a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a10:	b9d5      	cbnz	r5, 8000a48 <__sfp+0x64>
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <__sfp+0x88>)
 8000a14:	60e3      	str	r3, [r4, #12]
 8000a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8000a1c:	f000 f847 	bl	8000aae <__retarget_lock_init_recursive>
 8000a20:	f7ff ff96 	bl	8000950 <__sfp_lock_release>
 8000a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a2c:	6025      	str	r5, [r4, #0]
 8000a2e:	61a5      	str	r5, [r4, #24]
 8000a30:	2208      	movs	r2, #8
 8000a32:	4629      	mov	r1, r5
 8000a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a38:	f7ff fd44 	bl	80004c4 <memset>
 8000a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a44:	4620      	mov	r0, r4
 8000a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a48:	3468      	adds	r4, #104	; 0x68
 8000a4a:	e7d9      	b.n	8000a00 <__sfp+0x1c>
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	4638      	mov	r0, r7
 8000a50:	f7ff ff62 	bl	8000918 <__sfmoreglue>
 8000a54:	4604      	mov	r4, r0
 8000a56:	6030      	str	r0, [r6, #0]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d1d5      	bne.n	8000a08 <__sfp+0x24>
 8000a5c:	f7ff ff78 	bl	8000950 <__sfp_lock_release>
 8000a60:	230c      	movs	r3, #12
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	e7ee      	b.n	8000a44 <__sfp+0x60>
 8000a66:	bf00      	nop
 8000a68:	08000eec 	.word	0x08000eec
 8000a6c:	ffff0001 	.word	0xffff0001

08000a70 <_fwalk_reent>:
 8000a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a74:	4606      	mov	r6, r0
 8000a76:	4688      	mov	r8, r1
 8000a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a7c:	2700      	movs	r7, #0
 8000a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a82:	f1b9 0901 	subs.w	r9, r9, #1
 8000a86:	d505      	bpl.n	8000a94 <_fwalk_reent+0x24>
 8000a88:	6824      	ldr	r4, [r4, #0]
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d1f7      	bne.n	8000a7e <_fwalk_reent+0xe>
 8000a8e:	4638      	mov	r0, r7
 8000a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a94:	89ab      	ldrh	r3, [r5, #12]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d907      	bls.n	8000aaa <_fwalk_reent+0x3a>
 8000a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	d003      	beq.n	8000aaa <_fwalk_reent+0x3a>
 8000aa2:	4629      	mov	r1, r5
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	47c0      	blx	r8
 8000aa8:	4307      	orrs	r7, r0
 8000aaa:	3568      	adds	r5, #104	; 0x68
 8000aac:	e7e9      	b.n	8000a82 <_fwalk_reent+0x12>

08000aae <__retarget_lock_init_recursive>:
 8000aae:	4770      	bx	lr

08000ab0 <__retarget_lock_acquire_recursive>:
 8000ab0:	4770      	bx	lr

08000ab2 <__retarget_lock_release_recursive>:
 8000ab2:	4770      	bx	lr

08000ab4 <__swhatbuf_r>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000abc:	2900      	cmp	r1, #0
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	4614      	mov	r4, r2
 8000ac2:	461d      	mov	r5, r3
 8000ac4:	da07      	bge.n	8000ad6 <__swhatbuf_r+0x22>
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	602b      	str	r3, [r5, #0]
 8000aca:	89b3      	ldrh	r3, [r6, #12]
 8000acc:	061a      	lsls	r2, r3, #24
 8000ace:	d410      	bmi.n	8000af2 <__swhatbuf_r+0x3e>
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	e00e      	b.n	8000af4 <__swhatbuf_r+0x40>
 8000ad6:	466a      	mov	r2, sp
 8000ad8:	f000 f970 	bl	8000dbc <_fstat_r>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	dbf2      	blt.n	8000ac6 <__swhatbuf_r+0x12>
 8000ae0:	9a01      	ldr	r2, [sp, #4]
 8000ae2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ae6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000aea:	425a      	negs	r2, r3
 8000aec:	415a      	adcs	r2, r3
 8000aee:	602a      	str	r2, [r5, #0]
 8000af0:	e7ee      	b.n	8000ad0 <__swhatbuf_r+0x1c>
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	2000      	movs	r0, #0
 8000af6:	6023      	str	r3, [r4, #0]
 8000af8:	b016      	add	sp, #88	; 0x58
 8000afa:	bd70      	pop	{r4, r5, r6, pc}

08000afc <__smakebuf_r>:
 8000afc:	898b      	ldrh	r3, [r1, #12]
 8000afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b00:	079d      	lsls	r5, r3, #30
 8000b02:	4606      	mov	r6, r0
 8000b04:	460c      	mov	r4, r1
 8000b06:	d507      	bpl.n	8000b18 <__smakebuf_r+0x1c>
 8000b08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b0c:	6023      	str	r3, [r4, #0]
 8000b0e:	6123      	str	r3, [r4, #16]
 8000b10:	2301      	movs	r3, #1
 8000b12:	6163      	str	r3, [r4, #20]
 8000b14:	b002      	add	sp, #8
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	ab01      	add	r3, sp, #4
 8000b1a:	466a      	mov	r2, sp
 8000b1c:	f7ff ffca 	bl	8000ab4 <__swhatbuf_r>
 8000b20:	9900      	ldr	r1, [sp, #0]
 8000b22:	4605      	mov	r5, r0
 8000b24:	4630      	mov	r0, r6
 8000b26:	f000 f879 	bl	8000c1c <_malloc_r>
 8000b2a:	b948      	cbnz	r0, 8000b40 <__smakebuf_r+0x44>
 8000b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b30:	059a      	lsls	r2, r3, #22
 8000b32:	d4ef      	bmi.n	8000b14 <__smakebuf_r+0x18>
 8000b34:	f023 0303 	bic.w	r3, r3, #3
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	81a3      	strh	r3, [r4, #12]
 8000b3e:	e7e3      	b.n	8000b08 <__smakebuf_r+0xc>
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <__smakebuf_r+0x7c>)
 8000b42:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b44:	89a3      	ldrh	r3, [r4, #12]
 8000b46:	6020      	str	r0, [r4, #0]
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	9b00      	ldr	r3, [sp, #0]
 8000b50:	6163      	str	r3, [r4, #20]
 8000b52:	9b01      	ldr	r3, [sp, #4]
 8000b54:	6120      	str	r0, [r4, #16]
 8000b56:	b15b      	cbz	r3, 8000b70 <__smakebuf_r+0x74>
 8000b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f000 f93f 	bl	8000de0 <_isatty_r>
 8000b62:	b128      	cbz	r0, 8000b70 <__smakebuf_r+0x74>
 8000b64:	89a3      	ldrh	r3, [r4, #12]
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	81a3      	strh	r3, [r4, #12]
 8000b70:	89a0      	ldrh	r0, [r4, #12]
 8000b72:	4305      	orrs	r5, r0
 8000b74:	81a5      	strh	r5, [r4, #12]
 8000b76:	e7cd      	b.n	8000b14 <__smakebuf_r+0x18>
 8000b78:	0800090d 	.word	0x0800090d

08000b7c <_free_r>:
 8000b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d048      	beq.n	8000c14 <_free_r+0x98>
 8000b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b86:	9001      	str	r0, [sp, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8000b8e:	bfb8      	it	lt
 8000b90:	18e4      	addlt	r4, r4, r3
 8000b92:	f000 f947 	bl	8000e24 <__malloc_lock>
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <_free_r+0x9c>)
 8000b98:	9801      	ldr	r0, [sp, #4]
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	4615      	mov	r5, r2
 8000b9e:	b933      	cbnz	r3, 8000bae <_free_r+0x32>
 8000ba0:	6063      	str	r3, [r4, #4]
 8000ba2:	6014      	str	r4, [r2, #0]
 8000ba4:	b003      	add	sp, #12
 8000ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000baa:	f000 b941 	b.w	8000e30 <__malloc_unlock>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d90b      	bls.n	8000bca <_free_r+0x4e>
 8000bb2:	6821      	ldr	r1, [r4, #0]
 8000bb4:	1862      	adds	r2, r4, r1
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	bf04      	itt	eq
 8000bba:	681a      	ldreq	r2, [r3, #0]
 8000bbc:	685b      	ldreq	r3, [r3, #4]
 8000bbe:	6063      	str	r3, [r4, #4]
 8000bc0:	bf04      	itt	eq
 8000bc2:	1852      	addeq	r2, r2, r1
 8000bc4:	6022      	streq	r2, [r4, #0]
 8000bc6:	602c      	str	r4, [r5, #0]
 8000bc8:	e7ec      	b.n	8000ba4 <_free_r+0x28>
 8000bca:	461a      	mov	r2, r3
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	b10b      	cbz	r3, 8000bd4 <_free_r+0x58>
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d9fa      	bls.n	8000bca <_free_r+0x4e>
 8000bd4:	6811      	ldr	r1, [r2, #0]
 8000bd6:	1855      	adds	r5, r2, r1
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	d10b      	bne.n	8000bf4 <_free_r+0x78>
 8000bdc:	6824      	ldr	r4, [r4, #0]
 8000bde:	4421      	add	r1, r4
 8000be0:	1854      	adds	r4, r2, r1
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	6011      	str	r1, [r2, #0]
 8000be6:	d1dd      	bne.n	8000ba4 <_free_r+0x28>
 8000be8:	681c      	ldr	r4, [r3, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	6053      	str	r3, [r2, #4]
 8000bee:	4421      	add	r1, r4
 8000bf0:	6011      	str	r1, [r2, #0]
 8000bf2:	e7d7      	b.n	8000ba4 <_free_r+0x28>
 8000bf4:	d902      	bls.n	8000bfc <_free_r+0x80>
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	6003      	str	r3, [r0, #0]
 8000bfa:	e7d3      	b.n	8000ba4 <_free_r+0x28>
 8000bfc:	6825      	ldr	r5, [r4, #0]
 8000bfe:	1961      	adds	r1, r4, r5
 8000c00:	428b      	cmp	r3, r1
 8000c02:	bf04      	itt	eq
 8000c04:	6819      	ldreq	r1, [r3, #0]
 8000c06:	685b      	ldreq	r3, [r3, #4]
 8000c08:	6063      	str	r3, [r4, #4]
 8000c0a:	bf04      	itt	eq
 8000c0c:	1949      	addeq	r1, r1, r5
 8000c0e:	6021      	streq	r1, [r4, #0]
 8000c10:	6054      	str	r4, [r2, #4]
 8000c12:	e7c7      	b.n	8000ba4 <_free_r+0x28>
 8000c14:	b003      	add	sp, #12
 8000c16:	bd30      	pop	{r4, r5, pc}
 8000c18:	20000084 	.word	0x20000084

08000c1c <_malloc_r>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	1ccd      	adds	r5, r1, #3
 8000c20:	f025 0503 	bic.w	r5, r5, #3
 8000c24:	3508      	adds	r5, #8
 8000c26:	2d0c      	cmp	r5, #12
 8000c28:	bf38      	it	cc
 8000c2a:	250c      	movcc	r5, #12
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	4606      	mov	r6, r0
 8000c30:	db01      	blt.n	8000c36 <_malloc_r+0x1a>
 8000c32:	42a9      	cmp	r1, r5
 8000c34:	d903      	bls.n	8000c3e <_malloc_r+0x22>
 8000c36:	230c      	movs	r3, #12
 8000c38:	6033      	str	r3, [r6, #0]
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3e:	f000 f8f1 	bl	8000e24 <__malloc_lock>
 8000c42:	4921      	ldr	r1, [pc, #132]	; (8000cc8 <_malloc_r+0xac>)
 8000c44:	680a      	ldr	r2, [r1, #0]
 8000c46:	4614      	mov	r4, r2
 8000c48:	b99c      	cbnz	r4, 8000c72 <_malloc_r+0x56>
 8000c4a:	4f20      	ldr	r7, [pc, #128]	; (8000ccc <_malloc_r+0xb0>)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b923      	cbnz	r3, 8000c5a <_malloc_r+0x3e>
 8000c50:	4621      	mov	r1, r4
 8000c52:	4630      	mov	r0, r6
 8000c54:	f000 f83c 	bl	8000cd0 <_sbrk_r>
 8000c58:	6038      	str	r0, [r7, #0]
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	f000 f837 	bl	8000cd0 <_sbrk_r>
 8000c62:	1c43      	adds	r3, r0, #1
 8000c64:	d123      	bne.n	8000cae <_malloc_r+0x92>
 8000c66:	230c      	movs	r3, #12
 8000c68:	6033      	str	r3, [r6, #0]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f000 f8e0 	bl	8000e30 <__malloc_unlock>
 8000c70:	e7e3      	b.n	8000c3a <_malloc_r+0x1e>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	1b5b      	subs	r3, r3, r5
 8000c76:	d417      	bmi.n	8000ca8 <_malloc_r+0x8c>
 8000c78:	2b0b      	cmp	r3, #11
 8000c7a:	d903      	bls.n	8000c84 <_malloc_r+0x68>
 8000c7c:	6023      	str	r3, [r4, #0]
 8000c7e:	441c      	add	r4, r3
 8000c80:	6025      	str	r5, [r4, #0]
 8000c82:	e004      	b.n	8000c8e <_malloc_r+0x72>
 8000c84:	6863      	ldr	r3, [r4, #4]
 8000c86:	42a2      	cmp	r2, r4
 8000c88:	bf0c      	ite	eq
 8000c8a:	600b      	streq	r3, [r1, #0]
 8000c8c:	6053      	strne	r3, [r2, #4]
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f000 f8ce 	bl	8000e30 <__malloc_unlock>
 8000c94:	f104 000b 	add.w	r0, r4, #11
 8000c98:	1d23      	adds	r3, r4, #4
 8000c9a:	f020 0007 	bic.w	r0, r0, #7
 8000c9e:	1ac2      	subs	r2, r0, r3
 8000ca0:	d0cc      	beq.n	8000c3c <_malloc_r+0x20>
 8000ca2:	1a1b      	subs	r3, r3, r0
 8000ca4:	50a3      	str	r3, [r4, r2]
 8000ca6:	e7c9      	b.n	8000c3c <_malloc_r+0x20>
 8000ca8:	4622      	mov	r2, r4
 8000caa:	6864      	ldr	r4, [r4, #4]
 8000cac:	e7cc      	b.n	8000c48 <_malloc_r+0x2c>
 8000cae:	1cc4      	adds	r4, r0, #3
 8000cb0:	f024 0403 	bic.w	r4, r4, #3
 8000cb4:	42a0      	cmp	r0, r4
 8000cb6:	d0e3      	beq.n	8000c80 <_malloc_r+0x64>
 8000cb8:	1a21      	subs	r1, r4, r0
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 f808 	bl	8000cd0 <_sbrk_r>
 8000cc0:	3001      	adds	r0, #1
 8000cc2:	d1dd      	bne.n	8000c80 <_malloc_r+0x64>
 8000cc4:	e7cf      	b.n	8000c66 <_malloc_r+0x4a>
 8000cc6:	bf00      	nop
 8000cc8:	20000084 	.word	0x20000084
 8000ccc:	20000088 	.word	0x20000088

08000cd0 <_sbrk_r>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4d06      	ldr	r5, [pc, #24]	; (8000cec <_sbrk_r+0x1c>)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	602b      	str	r3, [r5, #0]
 8000cdc:	f7ff fb68 	bl	80003b0 <_sbrk>
 8000ce0:	1c43      	adds	r3, r0, #1
 8000ce2:	d102      	bne.n	8000cea <_sbrk_r+0x1a>
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	b103      	cbz	r3, 8000cea <_sbrk_r+0x1a>
 8000ce8:	6023      	str	r3, [r4, #0]
 8000cea:	bd38      	pop	{r3, r4, r5, pc}
 8000cec:	20000098 	.word	0x20000098

08000cf0 <__sread>:
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cf8:	f000 f8a0 	bl	8000e3c <_read_r>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	bfab      	itete	ge
 8000d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d02:	89a3      	ldrhlt	r3, [r4, #12]
 8000d04:	181b      	addge	r3, r3, r0
 8000d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d0a:	bfac      	ite	ge
 8000d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d0e:	81a3      	strhlt	r3, [r4, #12]
 8000d10:	bd10      	pop	{r4, pc}

08000d12 <__swrite>:
 8000d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d16:	461f      	mov	r7, r3
 8000d18:	898b      	ldrh	r3, [r1, #12]
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	4616      	mov	r6, r2
 8000d22:	d505      	bpl.n	8000d30 <__swrite+0x1e>
 8000d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d28:	2302      	movs	r3, #2
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f000 f868 	bl	8000e00 <_lseek_r>
 8000d30:	89a3      	ldrh	r3, [r4, #12]
 8000d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d3a:	81a3      	strh	r3, [r4, #12]
 8000d3c:	4632      	mov	r2, r6
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4628      	mov	r0, r5
 8000d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d46:	f000 b817 	b.w	8000d78 <_write_r>

08000d4a <__sseek>:
 8000d4a:	b510      	push	{r4, lr}
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d52:	f000 f855 	bl	8000e00 <_lseek_r>
 8000d56:	1c43      	adds	r3, r0, #1
 8000d58:	89a3      	ldrh	r3, [r4, #12]
 8000d5a:	bf15      	itete	ne
 8000d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d66:	81a3      	strheq	r3, [r4, #12]
 8000d68:	bf18      	it	ne
 8000d6a:	81a3      	strhne	r3, [r4, #12]
 8000d6c:	bd10      	pop	{r4, pc}

08000d6e <__sclose>:
 8000d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d72:	f000 b813 	b.w	8000d9c <_close_r>
	...

08000d78 <_write_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4d07      	ldr	r5, [pc, #28]	; (8000d98 <_write_r+0x20>)
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	4611      	mov	r1, r2
 8000d82:	2200      	movs	r2, #0
 8000d84:	602a      	str	r2, [r5, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	f7ff fac1 	bl	800030e <_write>
 8000d8c:	1c43      	adds	r3, r0, #1
 8000d8e:	d102      	bne.n	8000d96 <_write_r+0x1e>
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	b103      	cbz	r3, 8000d96 <_write_r+0x1e>
 8000d94:	6023      	str	r3, [r4, #0]
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
 8000d98:	20000098 	.word	0x20000098

08000d9c <_close_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4d06      	ldr	r5, [pc, #24]	; (8000db8 <_close_r+0x1c>)
 8000da0:	2300      	movs	r3, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	602b      	str	r3, [r5, #0]
 8000da8:	f7ff facd 	bl	8000346 <_close>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_close_r+0x1a>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_close_r+0x1a>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	20000098 	.word	0x20000098

08000dbc <_fstat_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	; (8000ddc <_fstat_r+0x20>)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	602b      	str	r3, [r5, #0]
 8000dca:	f7ff fac8 	bl	800035e <_fstat>
 8000dce:	1c43      	adds	r3, r0, #1
 8000dd0:	d102      	bne.n	8000dd8 <_fstat_r+0x1c>
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	b103      	cbz	r3, 8000dd8 <_fstat_r+0x1c>
 8000dd6:	6023      	str	r3, [r4, #0]
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000098 	.word	0x20000098

08000de0 <_isatty_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d06      	ldr	r5, [pc, #24]	; (8000dfc <_isatty_r+0x1c>)
 8000de4:	2300      	movs	r3, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	602b      	str	r3, [r5, #0]
 8000dec:	f7ff fac7 	bl	800037e <_isatty>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_isatty_r+0x1a>
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_isatty_r+0x1a>
 8000df8:	6023      	str	r3, [r4, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	20000098 	.word	0x20000098

08000e00 <_lseek_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d07      	ldr	r5, [pc, #28]	; (8000e20 <_lseek_r+0x20>)
 8000e04:	4604      	mov	r4, r0
 8000e06:	4608      	mov	r0, r1
 8000e08:	4611      	mov	r1, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	602a      	str	r2, [r5, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f7ff fac0 	bl	8000394 <_lseek>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_lseek_r+0x1e>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_lseek_r+0x1e>
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	20000098 	.word	0x20000098

08000e24 <__malloc_lock>:
 8000e24:	4801      	ldr	r0, [pc, #4]	; (8000e2c <__malloc_lock+0x8>)
 8000e26:	f7ff be43 	b.w	8000ab0 <__retarget_lock_acquire_recursive>
 8000e2a:	bf00      	nop
 8000e2c:	20000090 	.word	0x20000090

08000e30 <__malloc_unlock>:
 8000e30:	4801      	ldr	r0, [pc, #4]	; (8000e38 <__malloc_unlock+0x8>)
 8000e32:	f7ff be3e 	b.w	8000ab2 <__retarget_lock_release_recursive>
 8000e36:	bf00      	nop
 8000e38:	20000090 	.word	0x20000090

08000e3c <_read_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	4d07      	ldr	r5, [pc, #28]	; (8000e5c <_read_r+0x20>)
 8000e40:	4604      	mov	r4, r0
 8000e42:	4608      	mov	r0, r1
 8000e44:	4611      	mov	r1, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	602a      	str	r2, [r5, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f7ff fa42 	bl	80002d4 <_read>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_read_r+0x1e>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_read_r+0x1e>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	20000098 	.word	0x20000098

08000e60 <_init>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr

08000e6c <_fini>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr
